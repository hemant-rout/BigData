import ast
import sqlparse
import os
import re
from collections import defaultdict

def extract_strings_from_ast(node):
    """Recursively extract all string literals from an AST node, ignoring function definitions and calls."""
    if isinstance(node, (ast.FunctionDef, ast.Call, ast.Lambda)):
        return []
    
    strings = []
    if isinstance(node, ast.Str):
        strings.append(node.s)
    elif isinstance(node, ast.Constant) and isinstance(node.value, str):
        strings.append(node.value)
    elif isinstance(node, ast.JoinedStr):  # f-strings
        strings.extend(
            extract_strings_from_ast(value) for value in node.values if isinstance(value, ast.Str)
        )
    elif isinstance(node, ast.BinOp) and isinstance(node.op, ast.Add):
        strings.extend(extract_strings_from_ast(node.left))
        strings.extend(extract_strings_from_ast(node.right))
    elif isinstance(node, (ast.List, ast.Tuple)):
        for element in node.elts:
            strings.extend(extract_strings_from_ast(element))
    elif isinstance(node, ast.Expr):
        strings.extend(extract_strings_from_ast(node.value))
    elif isinstance(node, ast.Assign):
        strings.extend(extract_strings_from_ast(node.value))
    return strings

def extract_format_placeholders(query):
    """Extract placeholders from a .format() SQL string."""
    return re.findall(r'\{(\w+)\}', query)

def resolve_placeholders(query, values):
    """Resolve placeholders in SQL queries using provided values."""
    try:
        return query.format(**values)
    except KeyError:
        return query  # Return original query if not all placeholders are resolved

def is_sql_query(string):
    """Check if a string looks like an SQL query."""
    sql_keywords = ["SELECT", "INSERT", "UPDATE", "DELETE", "CREATE", "DROP", "ALTER", "JOIN", "WITH"]
    return any(re.search(rf"\b{kw}\b", string, re.IGNORECASE) for kw in sql_keywords)

def extract_ctes(query):
    """Extract CTE (Common Table Expression) definitions from a SQL query."""
    ctes = {}
    matches = re.finditer(r'WITH\s+(.*?)\s+SELECT', query, re.IGNORECASE | re.DOTALL)
    for match in matches:
        cte_part = match.group(1)
        cte_definitions = cte_part.split(',')
        for cte in cte_definitions:
            parts = cte.split(" AS ", 1)
            if len(parts) == 2:
                cte_name = parts[0].strip()
                cte_query = parts[1].strip().strip('()')
                ctes[cte_name] = cte_query
    return ctes

def remove_sql_comments_and_filters(query):
    """Remove comments and filter conditions from SQL query."""
    query = re.sub(r'--.*?$|/\*.*?\*/', '', query, flags=re.MULTILINE | re.DOTALL)
    query = re.sub(r'\bWHERE\b.*?(\bGROUP BY\b|\bORDER BY\b|\bHAVING\b|$)', '\\1', query, flags=re.IGNORECASE | re.DOTALL)
    return query

def extract_tables_and_joins(query):
    """Extract table names and join key relationships from an SQL query, resolving nested subqueries and table aliases."""
    query = remove_sql_comments_and_filters(query)
    tables = {}
    joins = []
    ctes = extract_ctes(query)
    parsed = sqlparse.parse(query)
    for stmt in parsed:
        tokens = [token for token in stmt.tokens if not token.is_whitespace]
        prev_token = None
        alias_map = {}
        join_aliases = set()
        for token in tokens:
            if isinstance(token, sqlparse.sql.Identifier):
                real_name = token.get_real_name()
                alias = token.get_alias() or real_name
                
                if prev_token and prev_token.value.upper() in {"FROM", "JOIN", "INTO", "UPDATE", "TABLE"}:
                    if real_name in ctes:
                        subquery_tables, subquery_joins = extract_tables_and_joins(ctes[real_name])
                        for sub_name in subquery_tables:
                            alias_map[alias] = sub_name
                        tables.update(subquery_tables)
                        joins.extend(subquery_joins)
                    else:
                        tables[alias] = real_name
                
                if prev_token and prev_token.value.upper() == "ON":
                    match = re.search(r"\(?\s*(\S+)\.(\S+)\s*=\s*(\S+)\.(\S+)\s*\)?", token.value, re.IGNORECASE)
                    if match:
                        left_table, left_col, right_table, right_col = match.groups()
                        left_table = alias_map.get(left_table, left_table)
                        right_table = alias_map.get(right_table, right_table)
                        joins.append({"join_table": f"{left_table}.{left_col}", "reference": f"{right_table}.{right_col}"})
                        join_aliases.add(left_table)
                        join_aliases.add(right_table)
        tables = {alias: name for alias, name in tables.items() if alias in join_aliases or alias == name}
    return tables, joins

def parse_sql_queries_from_code(code):
    """Extract SQL queries, tables, and join relationships from Python source code while ignoring functions."""
    queries_info = []
    tree = ast.parse(code)
    for node in ast.walk(tree):
        if isinstance(node, (ast.FunctionDef, ast.Call, ast.Lambda)):
            continue
        strings = extract_strings_from_ast(node)
        for s in strings:
            if is_sql_query(s):
                formatted_query = sqlparse.format(remove_sql_comments_and_filters(s), reindent=True, keyword_case='UPPER')
                tables, joins = extract_tables_and_joins(formatted_query)
                placeholders = extract_format_placeholders(s)
                resolved_query = resolve_placeholders(s, {})  # Empty dict for now, can be replaced with actual values
                queries_info.append((resolved_query, tables, joins, placeholders))
    return queries_info

def scan_python_file(file_path):
    """Scan a Python file and extract SQL queries and their metadata."""
    with open(file_path, "r", encoding="utf-8") as f:
        code = f.read()
    return parse_sql_queries_from_code(code)

def scan_directory(directory):
    """Scan all Python files in a directory for SQL queries and metadata."""
    sql_queries = {}
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".py"):
                file_path = os.path.join(root, file)
                queries = scan_python_file(file_path)
                if queries:
                    sql_queries[file_path] = queries
    return sql_queries

if __name__ == "__main__":
    directory_to_scan = "."  # Change this to the directory you want to scan
    results = scan_directory(directory_to_scan)
    for file, queries in results.items():
        print(f"\nSQL Queries found in {file}:")
        for query, tables, joins, placeholders in queries:
            print(query)
            print(f"Tables: {tables}")
            print(f"Join Relations: {joins}")
            if placeholders:
                print(f"Placeholders: {placeholders}")
            print("-" * 80)
